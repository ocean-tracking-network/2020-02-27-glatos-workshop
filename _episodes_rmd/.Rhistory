source('~/work/glatos/R/util-convert_otn_to_att.r')
library(tidyverse)
library(glatos)
library(plotly)
wal_det_file <- system.file("extdata", "walleye_detections.csv", package = "glatos")
walleye_detections <- read_glatos_detections(wal_det_file)
rec_file <- system.file("extdata", "sample_receivers.csv",  package = "glatos")
rcv <- read_glatos_receivers(rec_file)
# find and remove false detections
filtered_detections <-
walleye_detections %>%
false_detections(tf = 3600) %>%
filter(passed_filter != FALSE)
# Now we can convert the GLATOS filtered data into a ATT object to be used in VTrack
ATTdata <- glatos::convert_glatos_to_att(walleye_detections, rcv)
attr(ATTdata, "CRS") <- sp::CRS("+init=epsg:4326")
head(ATTdata)
library(VTrack)
aba <- abacusPlot(ATTdata, det.col = "red")
# Abacus plot by station
aba_facet <- abacusPlot(ATTdata, det.col = "red", facet = T)
print(aba)
print(aba_facet)
print(aba)
print(aba_facet)
library(lubridate, verbose = FALSE, warn.conflicts = FALSE)
abacus_data <-
ATTdata$Tag.Detections %>%
left_join(ATTdata$Tag.Metadata,  by = "Transmitter") %>%
mutate(date = date(Date.Time)) %>%
group_by(Tag.ID, date, Sci.Name) %>%
summarise(Num.Det = n())
abacus_data %>%
ggplot(aes(x = date, y = factor(Tag.ID), size = Num.Det, color = Sci.Name)) +
geom_point() +
theme_linedraw() +
labs(title = "Daily detection plot", x = "Date", y = "Tag ID", color = "Species", size = "Number of\ndetections")
detSum <- detectionSummary(ATTdata, sub = "%Y-%W")
detSum
# Overall metrics
head(detSum$Overall)
# Weeky metrics
head(detSum$Subsetted)
detSum$Subset %>%
mutate(Date = as.Date(paste(subset, "01", sep = "-"), "%Y-%W-%w")) %>%
ggplot(aes(x = Date, y = Number.of.Detections, colour = factor(Tag.ID))) +
geom_line() + geom_point() +
labs(title = "Number of Detections over time", x = "Date", y = "Number of Detections", colour = "Tag ID") +
theme_linedraw()
dispSum <- dispersalSummary(ATTdata)
head(dispSum)
dispSum %>%
mutate(Date = date(Date.Time),
Tag.ID = factor(Tag.ID)) %>%
group_by(Date, Tag.ID) %>%
summarise(Max.Disp.km = max(Consecutive.Dispersal)) %>%
ggplot(aes(x = Max.Disp.km, y=..scaled..,  fill = Tag.ID, color = Tag.ID)) +
geom_density(alpha=0.1) +
geom_rug(sides = "t", aes(y = Max.Disp.km, color = Tag.ID)) +
ylim(0,1) +
labs(x = "Maximum distance traveled per day (km)",
y = "Relative frequency of daily movements",
fill = "Tag ID", color = "Tag ID") +
theme_linedraw()
library(sf)
library(maptools)
library(mapview)
base <-
ATTdata$Station.Information %>%
st_as_sf(coords=c("Station.Longitude", "Station.Latitude"), crs = 4326) %>%
mapview(alpha.regions = 0, color = "grey", cex = 3, legend = F, homebutton = F, layer.name = "Receiver Stations")
## Now lets use the COA() function to calculate hourly centers of activity
COAdata <-
COA(ATTdata,
timestep = 60) ## timestep used to estimate centers of activity (in minutes)
## Now lets add our centers of activity for each individual on the map
COAmap <-
base +
COAdata %>%
st_as_sf(coords = c("Longitude.coa", "Latitude.coa"), crs = 4326) %>%
mapview(zcol = "Tag.ID", burst = T, alpha = 0, cex = 3, legend = F)
COAmap
proj<-CRS("+init=epsg:3174")
mcp_est <- HRSummary(COAdata,
projCRS = proj,
type = "MCP",
cont = 100,
sub = "%Y-%W")
head(mcp_est)
## Lets have a look at how 100% MCP area changes over the tagging period
mcp_est$Subset %>%
mutate(Date = as.Date(paste(subset, "01", sep = "-"), "%Y-%W-%w")) %>%
ggplot(aes(x = Date, y = MCP.100/1e6, colour = factor(Tag.ID))) +
geom_line() + geom_point() +
labs(x = "Date", y = "Area of MCP (km2)", colour = "Tag ID") +
theme_linedraw()
BBkud_est <- HRSummary(COAdata,
projCRS = proj,
h = 200,
type = "BBKUD",
cont = c(20,50,95),
storepoly = TRUE,
sub = "%Y-%W")
summary(BBkud_est)
# Overall Brownian bridge UD estimates for full tagging period
head(BBkud_est$Overall)
# Weekly Brownian bridge UD estimates for the three tagged walleye
head(BBkud_est$Subsetted)
fullstack <-
unlist(BBkud_est$Spatial.Objects)[grep("*_full", names(unlist(BBkud_est$Spatial.Objects)))]
names(fullstack) <-
unlist(lapply(strsplit(names(fullstack), "[.]"), `[[`, 1))
library(raster, verbose = FALSE, warn.conflicts = FALSE)
## Lets plot the overall BBKUD for Tag.ID `153`
fulltag <- fullstack$`153`
values(fulltag)[values(fulltag) > 95] <- NA
## Raster plot
plot(fulltag, zlim = c(0, 100))
## Mapview plot
base +
mapview(fulltag)
library(leaflet, verbose = FALSE, warn.conflicts = FALSE)
## Full KUD for all tagged animals
fullmap <- COAmap@map
for (i in 1:length(fullstack)) {
tempras<-disaggregate(fullstack[[i]], fact=3, method='bilinear')
values(tempras)[values(tempras) >95] <-NA
fullmap <-
fullmap %>%
addRasterImage(tempras, opacity = 0.7, group = names(fullstack)[i])
}
fullmap <-
fullmap %>%
addLayersControl(
baseGroups = names(fullstack),
overlayGroups = "Receiver Stations",
options = layersControlOptions(collapsed = FALSE)
)
fullmap
View(fullstack)
View(fullstack)
knitr::opts_chunk$set(collapse = T,comment ="", fig.pos = 'H')
is_html_output = function() {
knitr::opts_knit$get("rmarkdown.pandoc.to") =="html"
}
library(dplyr)
library(glatos)
library(plotly)
detection_file <- system.file("extdata", "walleye_detections.csv", package = "glatos")
receiver_file <- system.file("extdata", "sample_receivers.csv", package = "glatos")
receivers <- read_glatos_receivers(receiver_file)
detections <- read_glatos_detections(detection_file)
receivers <- receivers %>%
mutate( recover_date_time = replace(recover_date_time,
is.na(recover_date_time),
Sys.time()))
receivers <- receivers %>%
mutate( recover_date_time = replace(recover_date_time,
is.na(recover_date_time),
Sys.time()))
rei <- glatos::REI(detections,receivers)
geo <- list(
scope = 'north america',
showland = TRUE,
landcolor = toRGB("white"),
showocean = TRUE,
oceancolor = toRGB("gray"),
showcountreies = TRUE,
showlakes = TRUE,
lakecolor = plotly::toRGB("gray"),
resolution = 50,
center = list(lat = median(rei$latitude),
lon = median(rei$longitude)),
lonaxis = list(range=c(min(rei$longitude)-1, max(rei$longitude)+1)),
lataxis = list(range=c(min(rei$latitude)-1, max(rei$latitude)+1))
)
map <- rei %>%
plot_geo(lat = ~latitude, lon = ~longitude, color = ~rei,width=900 )%>%
add_markers(
text = ~paste(station, ': ', rei),
hoverinfo = "text",
size = ~c(rei * 5 +5)
)%>%
layout(title = "REI", geo = geo)
map
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoiYW51bmVzIiwiYSI6ImNqcjd2OGs4NDAwNWw0M3J2M20xZ25uMm0ifQ.o4e7GNwVWsZQ4xHP4OSvpg')
orca(map, file = 'rei_map.png')
orca(map, file = 'rei_map.png')
knitr::include_graphics('rei_map.png')
Sys.setenv('MAPBOX_TOKEN' = 'pk.eyJ1IjoiYW51bmVzIiwiYSI6ImNqcjd2OGs4NDAwNWw0M3J2M20xZ25uMm0ifQ.o4e7GNwVWsZQ4xHP4OSvpg')
rei_mapbox <- rei %>%
plot_mapbox(lat = ~latitude, lon = ~longitude, color = ~rei , width=900) %>%
add_markers(
text = ~paste(station, ':', rei),
hoverinfo = "text",
size = ~c(rei*6 +10)
)%>%
layout(title = "REI Mapbox",
mapbox = list(zoom = 5,
center = list(lat = ~median(latitude),
lon = ~median(longitude))
))
rei_mapbox
orca(rei_mapbox, file = 'rei_mapbox.png')
knitr::include_graphics('rei_mapbox.png')
library(VTrack)
